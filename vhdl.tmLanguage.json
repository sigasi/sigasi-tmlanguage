{
  "scopeName": "source.vhdl",
  "patterns": [
    {
      "name": "keyword.control.vhdl",
      "match": "(?i)\\b(abs|access|after|alias|all|and|architecture|array|assert|assume|assume_guarantee|attribute|begin|block|body|buffer|bus|case|component|configuration|constant|context|cover|default|disconnect|downto|else|elsif|end|endpoint|entity|exit|fairness|file|for|force|function|generate|generic|group|guarded|if|impure|in|inertial|inout|is|label|library|linkage|literal|loop|map|mod|nand|new|next|nor|not|null|of|on|open|or|others|out|package|parameter|port|postponed|private|procedure|process|property|protected|pure|range|record|register|reject|release|rem|report|restrict|restrict_guarantee|return|rol|ror|select|sequence|severity|shared|signal|sla|sll|sra|srl|strong|subtype|then|to|transport|type|unaffected|units|until|use|variable|wait|when|while|with|xnor|xor)\\b"
    },
    {
      "name": "string.quoted.double.vhdl",
      "match": "(\\\"([^\\\n\\\r\\\"]|\\\"\\\")*(\\\"|\\\n|\\\r)|%([^\\\n\\\r%]|%%)*(%|\\\n|\\\r))"
    },
    {
      "name": "constant.character.bit_string_literal.vhdl",
      "match": "(\\d(_?\\d)*)?(s|S|u|U)?(b|B|o|O|x|X|d|D)(\\\"([^\\\n\\\r\\\"]|\\\"\\\")*(\\\"|\\\n|\\\r)|%([^\\\n\\\r%]|%%)*(%|\\\n|\\\r))"
    },
    {
      "name": "identifier.valid.vhdl",
      "match": "((_|[a-z]|[A-Z]|[ß-ö]|[À-Ö]|[ø-ÿ]|[Ø-Ÿ])((_|[a-z]|[A-Z]|[ß-ö]|[À-Ö]|[ø-ÿ]|[Ø-Ÿ])|[0-9])*|\\\\([^\\\\\\\"]|\\\\\\\\)*\\\\)"
    },
    {
      "name": "constant.numeric.abstract_literal.vhdl",
      "match": "[0-9](_?[0-9])*((s|S|u|U)?(b|B|o|O|x|X|d|D)(\\\"([^\\\n\\\r\\\"]|\\\"\\\")*(\\\"|\\\n|\\\r)|%([^\\\n\\\r%]|%%)*(%|\\\n|\\\r))|(\\.[0-9](_?[0-9])*|#([0-9]|[a-z]|[A-Z])(_?([0-9]|[a-z]|[A-Z]))*(\\.([0-9]|[a-z]|[A-Z])(_?([0-9]|[a-z]|[A-Z]))*)?#)?((e|E)(\\+|-)?[0-9](_?[0-9])*)?)"
    },
    {
      "name": "comment.line.vhdl",
      "match": "--[^\\\n\\\r]*(\\\r?\\\n)?"
    },
    {
      "name": "comment.block.vhdl",
      "begin": "/\\*",
      "end": "\\*/",
      "patterns": []
    },
    {
      "name": "variable.other.constant.tool_directive.vhdl",
      "match": "`[^\\\n\\\r]*(\\\r?\\\n)?"
    }
  ]
}